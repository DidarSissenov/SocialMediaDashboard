[{"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\index.js":"1","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\App.js":"3","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Dashboard.js":"4","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Login.js":"5","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Register.js":"6","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\PostScheduler.js":"7","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\AnalyticsChart.js":"8"},{"size":535,"mtime":1699697274655,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1699697274720,"results":"11","hashOfConfig":"10"},{"size":911,"mtime":1704705957941,"results":"12","hashOfConfig":"10"},{"size":8122,"mtime":1704706338703,"results":"13","hashOfConfig":"10"},{"size":1796,"mtime":1704706443949,"results":"14","hashOfConfig":"10"},{"size":1784,"mtime":1704707067051,"results":"15","hashOfConfig":"10"},{"size":5866,"mtime":1704957767211,"results":"16","hashOfConfig":"10"},{"size":2740,"mtime":1704968145317,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1inznou",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\index.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\App.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Dashboard.js",["43"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AnalyticsChart from './AnalyticsChart';\r\n\r\n\r\nconst Dashboard = () => {\r\n  const [isInstagramLinked, setIsLinked] = useState(false);\r\n  const [mediaData, setMediaData] = useState([]);\r\n  const [profileData, setProfileData] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate(); \r\n  const [plannedPosts, setPlannedPosts] = useState([]);\r\n  const [isTwitterLinked, setIsTwitterLinked] = useState(false);\r\n  const [twitterProfile, setTwitterProfile] = useState(null); \r\n  const [tweetText, setTweetText] = useState('');\r\n  \r\n  // UseEffect to check links and fetch data\r\n  useEffect(() => {\r\n    checkInstagramLink();\r\n    checkTwitterLink();\r\n    fetchPlannedPosts();\r\n    // Fetch data only if the respective accounts are linked\r\n    if (isInstagramLinked) {\r\n      fetchBasicData();\r\n    }\r\n    if (isTwitterLinked) {\r\n      fetchTwitterProfile();\r\n    }\r\n    }, \r\n  []);\r\n\r\n\r\n  const postTweet = async () => {\r\n    try {\r\n      await axios.post('/api/twitter/post-tweet', { text: tweetText });\r\n      alert('Tweet posted successfully');\r\n      setTweetText(''); \r\n    } catch (error) {\r\n      console.error('Error posting tweet:', error);\r\n      alert('Error posting tweet');\r\n    }\r\n  };\r\n\r\n\r\n  const checkTwitterLink = async () => {\r\n    try {\r\n        const response = await axios.get('/api/twitter/check-link');\r\n        setIsTwitterLinked(response.data.isLinked);\r\n        if (response.data.isLinked) {\r\n            fetchTwitterProfile();\r\n        }\r\n    } catch (error) {\r\n        console.error('Error checking Twitter link:', error);\r\n        setError('Error checking Twitter link.');\r\n    }\r\n};\r\n\r\n  const fetchPlannedPosts = async () => {\r\n    try {\r\n      const response = await axios.get('/api/auth/posts'); \r\n      setPlannedPosts(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching planned posts:', error);\r\n      \r\n    }\r\n  };\r\n\r\n  const updatePostStatus = (postId, newStatus) => {\r\n    setPlannedPosts(prevPosts =>\r\n      prevPosts.map(post =>\r\n        post._id === postId ? { ...post, status: newStatus } : post\r\n      )\r\n    );\r\n  };\r\n\r\n  const deletePlannedPost = async (postId) => {\r\n    try {\r\n      await axios.delete(`/api/auth/posts/${postId}`);\r\n      setPlannedPosts(plannedPosts.filter(post => post._id !== postId));\r\n    } catch (error) {\r\n      console.error('Error deleting planned post:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTwitterProfile = async () => {\r\n    try {\r\n        const response = await axios.get('/api/twitter/my-profile');\r\n        setTwitterProfile(response.data);\r\n    } catch (error) {\r\n        console.error('Error fetching Twitter profile:', error);\r\n    }\r\n};\r\n\r\n  const handleLinkTwitter = () => {\r\n    window.location.href = '/api/twitter/oauth';\r\n  };\r\n  const checkInstagramLink = async () => {\r\n    try {\r\n      const response = await axios.get('/api/instagram/check-link');\r\n      setIsLinked(response.data.isLinked);\r\n      if (response.data.isLinked) {\r\n        fetchBasicData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking Instagram link:', error);\r\n      setError('Error checking Instagram link.');\r\n    }\r\n  };\r\n\r\n  \r\n  const fetchBasicData = async () => {\r\n    try {\r\n      const response = await axios.get('/api/instagram/basic-data');\r\n      setProfileData(response.data.profile);\r\n      setMediaData(response.data.media);\r\n    } catch (error) {\r\n      console.error('Error fetching basic Instagram data:', error);\r\n    }\r\n  };\r\n\r\n  const handleLinkInstagram = () => {\r\n    window.location.href = '/api/instagram/oauth';\r\n  };\r\n  \r\n  const navigateToScheduler = () => {\r\n    navigate('/post-scheduler'); \r\n  };\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <header className=\"dashboard-header\">\r\n        <h1>Social Media Analytics Dashboard</h1>\r\n        <nav>\r\n          <button onClick={navigateToScheduler}>Go to Post Scheduler</button>\r\n          <button onClick={handleLinkInstagram}>\r\n            {isInstagramLinked ? 'Re-link Instagram' : 'Link Instagram'}\r\n          </button>\r\n          <button onClick={handleLinkTwitter}>\r\n            {isTwitterLinked ? 'Re-link Twitter' : 'Link Twitter'}\r\n          </button>\r\n        </nav>\r\n      </header>\r\n  \r\n      {/* Display Instagram and Twitter sections only if linked */}\r\n      <div className=\"account-info\">\r\n        {isInstagramLinked && profileData && (\r\n          <div className=\"instagram-info\">\r\n            <h2>Instagram Profile Information</h2>\r\n            <p>Username: {profileData.username}</p>\r\n            <p>Account Type: {profileData.account_type}</p>\r\n            <p>Media Count: {profileData.media_count}</p>\r\n          </div>\r\n        )}\r\n  \r\n        {isTwitterLinked && twitterProfile && (\r\n          <div className=\"twitter-info\">\r\n            <h2>Twitter Profile Information</h2>\r\n            <p>Username: {twitterProfile.username}</p>\r\n            <p>Name: {twitterProfile.name}</p>\r\n            <p>Description: {twitterProfile.description}</p>\r\n            <p>Followers: {twitterProfile.public_metrics?.followers_count}</p>\r\n            <p>Following: {twitterProfile.public_metrics?.following_count}</p>\r\n            <p>Tweet Count: {twitterProfile.public_metrics?.tweet_count}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n  \r\n      {/* Recent Instagram Media section */}\r\n      <div className=\"media-sections\">\r\n        {mediaData.length > 0 && (\r\n          <div className=\"instagram-media\">\r\n            <h2>Recent Instagram Media:</h2>\r\n            <div className=\"media-grid\">\r\n              {mediaData.map((media, index) => (\r\n                <div key={index} className=\"media-item instagram-item\">\r\n                  <img src={media.media_url} alt={media.caption} />\r\n                  <p>{media.caption}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n  \r\n      {/* Planned Posts section */}\r\n      <div className=\"section\">\r\n        <h2>Planned Posts</h2>\r\n        {plannedPosts.length > 0 ? (\r\n          <div className=\"media-grid\">\r\n            {plannedPosts.map((post, index) => (\r\n              <div key={index} className=\"media-item\">\r\n                <h3>{post.title}</h3>\r\n                <p>{post.description}</p>\r\n                {post.image && <img src={post.image} alt={post.title} />}\r\n                <p className={`status ${post.status || 'planned'}`}>\r\n                  {(post.status || 'planned').toUpperCase()}\r\n                </p><br/>\r\n                <select \r\n                  value={post.status || 'planned'} \r\n                  onChange={(e) => updatePostStatus(post._id, e.target.value)}\r\n                  className={`status-dropdown ${post.status || 'planned'}`}\r\n                >\r\n                  <option value=\"planned\">Planned</option>\r\n                  <option value=\"posted\">Posted</option>\r\n                  <option value=\"overdue\">Overdue</option>\r\n                </select>\r\n                <button onClick={() => deletePlannedPost(post._id)} className=\"delete-btn\">Delete</button>\r\n                <p className=\"planned-date\">Planned for: {new Date(post.scheduledTime).toLocaleDateString()}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p>No planned posts available.</p>\r\n        )}\r\n      </div>\r\n  \r\n      {/* Post a Tweet section */}\r\n      {isTwitterLinked && (\r\n      <div className=\"tweet-form\">\r\n        <h2>Post a Tweet</h2>\r\n        <textarea \r\n          value={tweetText} \r\n          onChange={(e) => setTweetText(e.target.value)} \r\n          placeholder=\"What's happening?\"\r\n        ></textarea>\r\n        <button onClick={postTweet}>Tweet</button>\r\n      </div>\r\n      )}\r\n\r\n      {/* Analytics Section*/}\r\n      {isTwitterLinked && ( \r\n        <div className=\"analytics-section\">\r\n        <h2>Analytics</h2>\r\n        <AnalyticsChart />\r\n    </div>\r\n      )}\r\n    </div>\r\n  )};\r\n  \r\nexport default Dashboard;","C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Login.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\Register.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\PostScheduler.js",[],[],"C:\\Users\\groop\\social_media_dashboard\\frontend\\src\\components\\AnalyticsChart.js",["44","45"],[],{"ruleId":"46","severity":1,"message":"47","line":31,"column":3,"nodeType":"48","endLine":31,"endColumn":5,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":7,"column":12,"nodeType":"52","messageId":"53","endLine":7,"endColumn":19},{"ruleId":"50","severity":1,"message":"54","line":8,"column":12,"nodeType":"52","messageId":"53","endLine":8,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkInstagramLink', 'checkTwitterLink', 'isInstagramLinked', and 'isTwitterLinked'. Either include them or remove the dependency array.","ArrayExpression",["55"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.",{"desc":"56","fix":"57"},"Update the dependencies array to be: [checkInstagramLink, checkTwitterLink, isInstagramLinked, isTwitterLinked]",{"range":"58","text":"59"},[1044,1046],"[checkInstagramLink, checkTwitterLink, isInstagramLinked, isTwitterLinked]"]
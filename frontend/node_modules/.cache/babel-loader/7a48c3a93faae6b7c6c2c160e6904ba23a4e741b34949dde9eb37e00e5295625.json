{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\nvar _react = require(\"react\");\nvar _useConfigContext = _interopRequireDefault(require(\"../hooks/useConfigContext\"));\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\nvar _useClockEvents = _interopRequireDefault(require(\"../hooks/useClockEvents\"));\nvar _constants = require(\"../helpers/constants\");\nvar _utils = require(\"../helpers/utils\");\nvar _useStateContext = _interopRequireDefault(require(\"../hooks/useStateContext\"));\nvar _jsxRuntime = require(\"@emotion/react/jsx-runtime\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ClockWrapper() {\n  const config = (0, _useConfigContext.default)(); // clock events\n\n  const clock = (0, _react.useRef)(null);\n  const {\n    mode,\n    updateTimeValue\n  } = (0, _useStateContext.default)();\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n  const calculateTimeValue = (0, _react.useCallback)((angle, _ref) => {\n    let {\n      canAutoChangeMode = false,\n      wasTapped = false,\n      isInnerClick = false\n    } = _ref;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    let minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n    const val = angle / 360 * totalIncrements;\n    let selected = Math.round(val / minIncrement) * minIncrement;\n    /*\n    \tnormalize value, acounts for angle that 12 is selected at, eg:\n    \t- if 12 clicked between 12 and 1, results in 0\n    \t- if 12 clicked between 11 and 12, results in 12\n    */\n\n    if ((0, _utils.isHourMode)(mode)) {\n      selected = selected % 12;\n    }\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      if (!isInnerClick) {\n        selected += 12;\n      } // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n\n      if (selected === 12) selected = 0;else if (selected === 0) selected = 12;\n    } // update time officially on timekeeper\n\n    updateTimeValue(selected, {\n      type: 'clock',\n      canAutoChangeMode\n    });\n  }, [config.forceCoarseMinutes, config.coarseMinutes, config.hour24Mode, mode, updateTimeValue]);\n  const {\n    bind\n  } = (0, _useClockEvents.default)(clock, calculateTimeValue);\n  return (0, _jsxRuntime.jsxs)(\"div\", {\n    ...bind,\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default,\n    \"data-testid\": \"clock-wrapper\",\n    children: [(0, _jsxRuntime.jsx)(_Clock.default, {\n      clockEl: clock\n    }), !config.hour24Mode && (0, _jsxRuntime.jsx)(_Meridiems.default, {})]\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","ClockWrapper","_react","require","_useConfigContext","_interopRequireDefault","_Clock","_Meridiems","_clockWrapper","_useClockEvents","_constants","_utils","_useStateContext","_jsxRuntime","obj","__esModule","config","clock","useRef","mode","updateTimeValue","calculateTimeValue","useCallback","angle","_ref","canAutoChangeMode","wasTapped","isInnerClick","totalIncrements","CLOCK_VALUES","increments","minIncrement","isMinuteMode","forceCoarseMinutes","coarseMinutes","val","selected","Math","round","isHourMode","MODE","HOURS_24","hour24Mode","type","bind","jsxs","className","css","children","jsx","clockEl"],"sources":["C:/Users/groop/social_media_dashboard/frontend/node_modules/react-timekeeper/lib/components/ClockWrapper.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _react = require(\"react\");\n\nvar _useConfigContext = _interopRequireDefault(require(\"../hooks/useConfigContext\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _useClockEvents = _interopRequireDefault(require(\"../hooks/useClockEvents\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _useStateContext = _interopRequireDefault(require(\"../hooks/useStateContext\"));\n\nvar _jsxRuntime = require(\"@emotion/react/jsx-runtime\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ClockWrapper() {\n  const config = (0, _useConfigContext.default)(); // clock events\n\n  const clock = (0, _react.useRef)(null);\n  const {\n    mode,\n    updateTimeValue\n  } = (0, _useStateContext.default)();\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n  const calculateTimeValue = (0, _react.useCallback)((angle, _ref) => {\n    let {\n      canAutoChangeMode = false,\n      wasTapped = false,\n      isInnerClick = false\n    } = _ref;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    let minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    const val = angle / 360 * totalIncrements;\n    let selected = Math.round(val / minIncrement) * minIncrement;\n    /*\n    \tnormalize value, acounts for angle that 12 is selected at, eg:\n    \t- if 12 clicked between 12 and 1, results in 0\n    \t- if 12 clicked between 11 and 12, results in 12\n    */\n\n    if ((0, _utils.isHourMode)(mode)) {\n      selected = selected % 12;\n    }\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      if (!isInnerClick) {\n        selected += 12;\n      } // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n\n\n      if (selected === 12) selected = 0;else if (selected === 0) selected = 12;\n    } // update time officially on timekeeper\n\n\n    updateTimeValue(selected, {\n      type: 'clock',\n      canAutoChangeMode\n    });\n  }, [config.forceCoarseMinutes, config.coarseMinutes, config.hour24Mode, mode, updateTimeValue]);\n  const {\n    bind\n  } = (0, _useClockEvents.default)(clock, calculateTimeValue);\n  return (0, _jsxRuntime.jsxs)(\"div\", { ...bind,\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default,\n    \"data-testid\": \"clock-wrapper\",\n    children: [(0, _jsxRuntime.jsx)(_Clock.default, {\n      clockEl: clock\n    }), !config.hour24Mode && (0, _jsxRuntime.jsx)(_Meridiems.default, {})]\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
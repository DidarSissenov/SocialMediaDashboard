{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{BarChart,Bar,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const AnalyticsChart=()=>{const[data,setData]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');useEffect(()=>{const fakeData=[{\"date\":\"2024-01-01\",\"followers\":100,\"posts\":5},{\"date\":\"2024-01-02\",\"followers\":105,\"posts\":7},{\"date\":\"2024-01-03\",\"followers\":110,\"posts\":4},{\"date\":\"2024-01-04\",\"followers\":115,\"posts\":6},{\"date\":\"2024-01-05\",\"followers\":120,\"posts\":8}];const parsedData=fakeData.map(item=>({...item,date:new Date(item.date)}));setData(parsedData);/* const fetchAnalyticsData = async () => {\r\n            try {\r\n                const response = await axios.get('/api/auth/analytics');\r\n                console.log('API Response:', response.data); // Debugging: Log API response\r\n                setData(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching analytics data:', error);\r\n                setError('Failed to fetch analytics data');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchAnalyticsData();*/},[]);const formatDate=date=>{return date.toLocaleDateString();};/*if (loading) {\r\n        return <p>Loading analytics data...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>{error}</p>;\r\n    }\r\n*/if(!Array.isArray(data)||data.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"No data available for chart yet. The chart will appear when it will have more data\"});}return/*#__PURE__*/_jsxs(BarChart,{width:500,height:300,data:data,margin:{top:5,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\",tickFormatter:formatDate}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{labelFormatter:formatDate}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"followers\",fill:\"#8884d8\"}),/*#__PURE__*/_jsx(Bar,{dataKey:\"posts\",fill:\"#82ca9d\"})]});};export default AnalyticsChart;","map":{"version":3,"names":["React","useState","useEffect","axios","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","AnalyticsChart","data","setData","loading","setLoading","error","setError","fakeData","parsedData","map","item","date","Date","formatDate","toLocaleDateString","Array","isArray","length","children","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","labelFormatter","fill"],"sources":["C:/Users/groop/social_media_dashboard/frontend/src/components/AnalyticsChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nconst AnalyticsChart = () => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fakeData = [\r\n            {\"date\": \"2024-01-01\", \"followers\": 100, \"posts\": 5},\r\n            {\"date\": \"2024-01-02\", \"followers\": 105, \"posts\": 7},\r\n            {\"date\": \"2024-01-03\", \"followers\": 110, \"posts\": 4},\r\n            {\"date\": \"2024-01-04\", \"followers\": 115, \"posts\": 6},\r\n            {\"date\": \"2024-01-05\", \"followers\": 120, \"posts\": 8}\r\n        ];\r\n\r\n        const parsedData = fakeData.map(item => ({\r\n            ...item,\r\n            date: new Date(item.date)\r\n        \r\n        }));\r\n\r\n        setData(parsedData);\r\n       /* const fetchAnalyticsData = async () => {\r\n            try {\r\n                const response = await axios.get('/api/auth/analytics');\r\n                console.log('API Response:', response.data); // Debugging: Log API response\r\n                setData(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching analytics data:', error);\r\n                setError('Failed to fetch analytics data');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchAnalyticsData();*/\r\n    }, []);\r\n\r\n    const formatDate = (date) => {\r\n        return date.toLocaleDateString();\r\n    };\r\n\r\n    /*if (loading) {\r\n        return <p>Loading analytics data...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>{error}</p>;\r\n    }\r\n*/\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n        return <p>No data available for chart yet. The chart will appear when it will have more data</p>;\r\n    }\r\n\r\n    return (\r\n        <BarChart\r\n            width={500}\r\n            height={300}\r\n            data={data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" tickFormatter={formatDate} />\r\n            <YAxis />\r\n            <Tooltip labelFormatter={formatDate} />\r\n            <Legend />\r\n            <Bar dataKey=\"followers\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"posts\" fill=\"#82ca9d\" />\r\n        </BarChart>\r\n    );\r\n};\r\n\r\nexport default AnalyticsChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _time = require(\"./time\");\n\n/*\n\tmodule assumes 24h format\n*/\nfunction parseTime(time) {\n  const match = time.match(_time.TIME_PARSE_24);\n  if (!match) {\n    throw new Error('Could not parse time for disabled time range');\n  }\n  return {\n    hour: parseInt(match[1], 10),\n    minute: parseInt(match[2], 10)\n  };\n}\nfunction generateHourValidator(fromH, fromM, toH, toM) {\n  const minH = fromH;\n  const maxH = toH;\n  const isSameHour = fromH === toH;\n  if (fromH < toH || isSameHour && fromM < toM) {\n    // regular range\n    return hour => hour <= minH || hour >= maxH;\n  } // overnight range: fromH > toH || (isSameHour && fromM > toM)\n\n  return hour => hour <= minH && hour >= maxH;\n}\nfunction generateMinuteValidator(fromH, fromM, toH, toM, hourValidator) {\n  return (h, m) => {\n    // if hour is invalid, all minutes should be invalid\n    if (!hourValidator(h)) {\n      return false;\n    }\n    if (h === fromH) {\n      return m <= fromM;\n    } else if (h === toH) {\n      return m >= toM;\n    }\n    return true;\n  };\n}\nclass DisabledTimeRange {\n  constructor(from, to) {\n    const {\n      hour: fromH,\n      minute: fromM\n    } = parseTime(from);\n    const {\n      hour: toH,\n      minute: toM\n    } = parseTime(to);\n    if (fromH === toH && fromM === toM) {\n      throw new Error('invalid date range - same time');\n    }\n    this.validateHour = generateHourValidator(fromH, fromM, toH, toM);\n    this.validateMinute = generateMinuteValidator(fromH, fromM, toH, toM, this.validateHour);\n  }\n}\nexports.default = DisabledTimeRange;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_time","require","parseTime","time","match","TIME_PARSE_24","Error","hour","parseInt","minute","generateHourValidator","fromH","fromM","toH","toM","minH","maxH","isSameHour","generateMinuteValidator","hourValidator","h","m","DisabledTimeRange","constructor","from","to","validateHour","validateMinute"],"sources":["C:/Users/groop/social_media_dashboard/frontend/node_modules/react-timekeeper/lib/helpers/disable-time.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _time = require(\"./time\");\n\n/*\n\tmodule assumes 24h format\n*/\nfunction parseTime(time) {\n  const match = time.match(_time.TIME_PARSE_24);\n\n  if (!match) {\n    throw new Error('Could not parse time for disabled time range');\n  }\n\n  return {\n    hour: parseInt(match[1], 10),\n    minute: parseInt(match[2], 10)\n  };\n}\n\nfunction generateHourValidator(fromH, fromM, toH, toM) {\n  const minH = fromH;\n  const maxH = toH;\n  const isSameHour = fromH === toH;\n\n  if (fromH < toH || isSameHour && fromM < toM) {\n    // regular range\n    return hour => hour <= minH || hour >= maxH;\n  } // overnight range: fromH > toH || (isSameHour && fromM > toM)\n\n\n  return hour => hour <= minH && hour >= maxH;\n}\n\nfunction generateMinuteValidator(fromH, fromM, toH, toM, hourValidator) {\n  return (h, m) => {\n    // if hour is invalid, all minutes should be invalid\n    if (!hourValidator(h)) {\n      return false;\n    }\n\n    if (h === fromH) {\n      return m <= fromM;\n    } else if (h === toH) {\n      return m >= toM;\n    }\n\n    return true;\n  };\n}\n\nclass DisabledTimeRange {\n  constructor(from, to) {\n    const {\n      hour: fromH,\n      minute: fromM\n    } = parseTime(from);\n    const {\n      hour: toH,\n      minute: toM\n    } = parseTime(to);\n\n    if (fromH === toH && fromM === toM) {\n      throw new Error('invalid date range - same time');\n    }\n\n    this.validateHour = generateHourValidator(fromH, fromM, toH, toM);\n    this.validateMinute = generateMinuteValidator(fromH, fromM, toH, toM, this.validateHour);\n  }\n\n}\n\nexports.default = DisabledTimeRange;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,KAAK,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE7B;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACK,aAAa,CAAC;EAE7C,IAAI,CAACD,KAAK,EAAE;IACV,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;EACjE;EAEA,OAAO;IACLC,IAAI,EAAEC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5BK,MAAM,EAAED,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;EAC/B,CAAC;AACH;AAEA,SAASM,qBAAqBA,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAE;EACrD,MAAMC,IAAI,GAAGJ,KAAK;EAClB,MAAMK,IAAI,GAAGH,GAAG;EAChB,MAAMI,UAAU,GAAGN,KAAK,KAAKE,GAAG;EAEhC,IAAIF,KAAK,GAAGE,GAAG,IAAII,UAAU,IAAIL,KAAK,GAAGE,GAAG,EAAE;IAC5C;IACA,OAAOP,IAAI,IAAIA,IAAI,IAAIQ,IAAI,IAAIR,IAAI,IAAIS,IAAI;EAC7C,CAAC,CAAC;;EAGF,OAAOT,IAAI,IAAIA,IAAI,IAAIQ,IAAI,IAAIR,IAAI,IAAIS,IAAI;AAC7C;AAEA,SAASE,uBAAuBA,CAACP,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEK,aAAa,EAAE;EACtE,OAAO,CAACC,CAAC,EAAEC,CAAC,KAAK;IACf;IACA,IAAI,CAACF,aAAa,CAACC,CAAC,CAAC,EAAE;MACrB,OAAO,KAAK;IACd;IAEA,IAAIA,CAAC,KAAKT,KAAK,EAAE;MACf,OAAOU,CAAC,IAAIT,KAAK;IACnB,CAAC,MAAM,IAAIQ,CAAC,KAAKP,GAAG,EAAE;MACpB,OAAOQ,CAAC,IAAIP,GAAG;IACjB;IAEA,OAAO,IAAI;EACb,CAAC;AACH;AAEA,MAAMQ,iBAAiB,CAAC;EACtBC,WAAWA,CAACC,IAAI,EAAEC,EAAE,EAAE;IACpB,MAAM;MACJlB,IAAI,EAAEI,KAAK;MACXF,MAAM,EAAEG;IACV,CAAC,GAAGV,SAAS,CAACsB,IAAI,CAAC;IACnB,MAAM;MACJjB,IAAI,EAAEM,GAAG;MACTJ,MAAM,EAAEK;IACV,CAAC,GAAGZ,SAAS,CAACuB,EAAE,CAAC;IAEjB,IAAId,KAAK,KAAKE,GAAG,IAAID,KAAK,KAAKE,GAAG,EAAE;MAClC,MAAM,IAAIR,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,IAAI,CAACoB,YAAY,GAAGhB,qBAAqB,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,CAAC;IACjE,IAAI,CAACa,cAAc,GAAGT,uBAAuB,CAACP,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAE,IAAI,CAACY,YAAY,CAAC;EAC1F;AAEF;AAEA7B,OAAO,CAACE,OAAO,GAAGuB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}
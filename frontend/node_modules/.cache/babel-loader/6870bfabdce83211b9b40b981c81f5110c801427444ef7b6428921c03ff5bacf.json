{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TopBar;\nvar _react = require(\"react\");\nvar _TimeDropdown = _interopRequireDefault(require(\"./TimeDropdown\"));\nvar _useStateContext = _interopRequireDefault(require(\"../hooks/useStateContext\"));\nvar _useConfigContext = _interopRequireDefault(require(\"../hooks/useConfigContext\"));\nvar styles = _interopRequireWildcard(require(\"./styles/top-bar\"));\nvar _constants = require(\"../helpers/constants\");\nvar _utils = require(\"../helpers/utils\");\nvar _jsxRuntime = require(\"@emotion/react/jsx-runtime\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction TopBar() {\n  const {\n    hour24Mode\n  } = (0, _useConfigContext.default)();\n  const {\n    mode,\n    time,\n    updateMeridiem,\n    setMode\n  } = (0, _useStateContext.default)();\n  const [open, setOpen] = (0, _react.useState)(null); // time clicks\n\n  function timeClick(type) {\n    const current = mode === _constants.MODE.MINUTES ? 'minute' : 'hour';\n    if (type === current) {\n      setOpen(current);\n    } else {\n      const m = mode === _constants.MODE.MINUTES ? _constants.MODE.HOURS_24 : _constants.MODE.MINUTES;\n      setMode(m);\n    }\n  } // double ternary nastiness\n\n  const hour = hour24Mode ? time.hour : time.hour % 12 === 0 ? 12 : time.hour % 12; // meridiem\n\n  const meridiem = time.hour >= 12 ? _constants.MERIDIEM.pm : _constants.MERIDIEM.am;\n  function toggleMeridiem() {\n    const m = meridiem === _constants.MERIDIEM.am ? _constants.MERIDIEM.pm : _constants.MERIDIEM.am;\n    updateMeridiem(m);\n  }\n  const isHour = (0, _utils.isHourMode)(mode);\n  const formattedMinute = ('0' + time.minute).slice(-2);\n  const closeDropdown = () => setOpen(null);\n  return (0, _jsxRuntime.jsxs)(\"div\", {\n    css: styles.wrapper(hour24Mode),\n    className: \"react-timekeeper__top-bar\",\n    \"data-testid\": \"topbar\",\n    children: [(0, _jsxRuntime.jsxs)(\"div\", {\n      css: styles.hourWrapper(hour24Mode),\n      className: \"react-timekeeper__tb-minute-wrapper\",\n      children: [(0, _jsxRuntime.jsx)(\"span\", {\n        css: [styles.time(isHour), process.env.NODE_ENV === \"production\" ? \"\" : \";label:TopBar;\", process.env.NODE_ENV === \"production\" ? \"\" : \"\"],\n        onClick: () => timeClick('hour'),\n        \"data-testid\": \"topbar_hour\",\n        className: \"react-timekeeper__tb-hour \".concat(isHour ? 'react-timekeeper__tb-hour--active' : ''),\n        children: hour\n      }), open === 'hour' && (0, _jsxRuntime.jsx)(_TimeDropdown.default, {\n        close: closeDropdown\n      })]\n    }), (0, _jsxRuntime.jsx)(\"span\", {\n      css: styles.colon,\n      className: \"react-timekeeper__tb-colon\",\n      children: \":\"\n    }), (0, _jsxRuntime.jsxs)(\"div\", {\n      css: styles.minuteWrapper(hour24Mode),\n      className: \"react-timekeeper__tb-hour-wrapper\",\n      children: [(0, _jsxRuntime.jsx)(\"span\", {\n        css: styles.time(!isHour),\n        onClick: () => timeClick('minute'),\n        \"data-testid\": \"topbar_minute\",\n        className: \"react-timekeeper__tb-minute \".concat(isHour ? '' : 'react-timekeeper__tb-minute--active'),\n        children: formattedMinute\n      }), open === 'minute' && (0, _jsxRuntime.jsx)(_TimeDropdown.default, {\n        close: closeDropdown\n      })]\n    }), !hour24Mode && (0, _jsxRuntime.jsx)(\"button\", {\n      name: \"meridiem\",\n      type: \"button\",\n      onClick: toggleMeridiem,\n      css: styles.meridiem,\n      \"data-testid\": \"topbar_meridiem\",\n      className: \"react-timekeeper-button-reset react-timekeeper__tb-meridiem\",\n      children: meridiem\n    })]\n  });\n}","map":{"version":3,"names":[],"sources":["C:\\Users\\groop\\social_media_dashboard\\frontend\\node_modules\\react-timekeeper\\src\\components\\TopBar.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport TimeDropdown from './TimeDropdown'\nimport useTimekeeperState from '../hooks/useStateContext'\nimport useConfig from '../hooks/useConfigContext'\nimport * as styles from './styles/top-bar'\nimport { MODE, MERIDIEM } from '../helpers/constants'\nimport { isHourMode } from '../helpers/utils'\n\nexport default function TopBar() {\n\tconst { hour24Mode } = useConfig()\n\tconst { mode, time, updateMeridiem, setMode } = useTimekeeperState()\n\tconst [open, setOpen] = useState<null | 'hour' | 'minute'>(null)\n\n\t// time clicks\n\tfunction timeClick(type: 'minute' | 'hour') {\n\t\tconst current = mode === MODE.MINUTES ? 'minute' : 'hour'\n\t\tif (type === current) {\n\t\t\tsetOpen(current)\n\t\t} else {\n\t\t\tconst m = mode === MODE.MINUTES ? MODE.HOURS_24 : MODE.MINUTES\n\t\t\tsetMode(m)\n\t\t}\n\t}\n\n\t// double ternary nastiness\n\tconst hour = hour24Mode ? time.hour : time.hour % 12 === 0 ? 12 : time.hour % 12\n\n\t// meridiem\n\tconst meridiem = time.hour >= 12 ? MERIDIEM.pm : MERIDIEM.am\n\tfunction toggleMeridiem() {\n\t\tconst m = meridiem === MERIDIEM.am ? MERIDIEM.pm : MERIDIEM.am\n\t\tupdateMeridiem(m)\n\t}\n\n\tconst isHour = isHourMode(mode)\n\tconst formattedMinute = ('0' + time.minute).slice(-2)\n\n\tconst closeDropdown = () => setOpen(null)\n\n\treturn (\n\t\t<div\n\t\t\tcss={styles.wrapper(hour24Mode)}\n\t\t\tclassName=\"react-timekeeper__top-bar\"\n\t\t\tdata-testid=\"topbar\"\n\t\t>\n\t\t\t{/* hour */}\n\t\t\t<div\n\t\t\t\tcss={styles.hourWrapper(hour24Mode)}\n\t\t\t\tclassName=\"react-timekeeper__tb-minute-wrapper\"\n\t\t\t>\n\t\t\t\t<span\n\t\t\t\t\tcss={[styles.time(isHour)]}\n\t\t\t\t\tonClick={() => timeClick('hour')}\n\t\t\t\t\tdata-testid=\"topbar_hour\"\n\t\t\t\t\tclassName={`react-timekeeper__tb-hour ${\n\t\t\t\t\t\tisHour ? 'react-timekeeper__tb-hour--active' : ''\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\t{hour}\n\t\t\t\t</span>\n\t\t\t\t{open === 'hour' && <TimeDropdown close={closeDropdown} />}\n\t\t\t</div>\n\n\t\t\t<span css={styles.colon} className=\"react-timekeeper__tb-colon\">\n\t\t\t\t:\n\t\t\t</span>\n\n\t\t\t{/* minute */}\n\t\t\t<div\n\t\t\t\tcss={styles.minuteWrapper(hour24Mode)}\n\t\t\t\tclassName=\"react-timekeeper__tb-hour-wrapper\"\n\t\t\t>\n\t\t\t\t<span\n\t\t\t\t\tcss={styles.time(!isHour)}\n\t\t\t\t\tonClick={() => timeClick('minute')}\n\t\t\t\t\tdata-testid=\"topbar_minute\"\n\t\t\t\t\tclassName={`react-timekeeper__tb-minute ${\n\t\t\t\t\t\tisHour ? '' : 'react-timekeeper__tb-minute--active'\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\t{formattedMinute}\n\t\t\t\t</span>\n\t\t\t\t{open === 'minute' && <TimeDropdown close={closeDropdown} />}\n\t\t\t</div>\n\n\t\t\t{/* meridiem */}\n\t\t\t{!hour24Mode && (\n\t\t\t\t<button\n\t\t\t\t\tname=\"meridiem\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={toggleMeridiem}\n\t\t\t\t\tcss={styles.meridiem}\n\t\t\t\t\tdata-testid=\"topbar_meridiem\"\n\t\t\t\t\tclassName=\"react-timekeeper-button-reset react-timekeeper__tb-meridiem\"\n\t\t\t\t>\n\t\t\t\t\t{meridiem}\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n"],"mappings":"AAoDK"},"metadata":{},"sourceType":"script","externalDependencies":[]}